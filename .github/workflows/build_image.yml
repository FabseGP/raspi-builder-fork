on:
  push

jobs:
  release:
    name: Release - ${{ matrix.platform.os-name }}
    strategy:
      matrix:
        platform:
          - os-name: Linux-x86_64
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os-name: Linux-aarch64
            runs-on: ubuntu-latest
            target: aarch64-unknown-linux-gnu
    runs-on: ${{ matrix.platform.runs-on }}
    steps:
      - name: Install dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y build-essential git pkg-config \
              zlib1g-dev libnl-3-dev libnl-genl-3-dev libcap-dev libpcap-dev \
              libnm-dev libdw-dev libsqlite3-dev libprotobuf-dev libprotobuf-c-dev \
              protobuf-compiler protobuf-c-compiler libsensors-dev libusb-1.0-0-dev \
              python3 python3-setuptools python3-protobuf python3-requests zlib1g \
              python3-numpy python3-serial python3-usb python3-dev python3-websockets \
              librtlsdr-dev libubertooth-dev libbtbb-dev libmosquitto-dev gcc make zlib1g-dev
            if [[ "${{ matrix.platform.target }}" == "aarch64-unknown-linux-gnu" ]]; then
              sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
            fi
      - name: Checkout openssl (non-x86_64 targets)
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        uses: actions/checkout@v4
        with:
          repository: openssl/openssl
      - name: Compile openssl (non-x86_64 targets)
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          ./Configure linux-aarch64 \
            --prefix=/opt/aarch64-openssl \
            --cross-compile-prefix=aarch64-linux-gnu-
          make -j$(nproc)
          sudo make install
      - name: Checkout libwebsockets
        uses: actions/checkout@v4
        with:
          repository: warmcat/libwebsockets
      - name: Compile libwebsockets
        run: |
          mkdir build
          cd build
          if [[ "${{ matrix.platform.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cmake .. -DCMAKE_TOOLCHAIN_FILE=../contrib/cross-aarch64.cmake \
              -DLWS_WITH_CLIENT=1 \
              -DLWS_WITHOUT_EXTENSIONS=1 \
              -DCMAKE_INSTALL_PREFIX=/usr/local \
              -DOPENSSL_ROOT_DIR=/opt/aarch64-openssl \
              -DOPENSSL_INCLUDE_DIR=/opt/aarch64-openssl/include \
              -DOPENSSL_SSL_LIBRARY=/opt/aarch64-openssl/lib/libssl.a \
              -DOPENSSL_CRYPTO_LIBRARY=/opt/aarch64-openssl/lib/libcrypto.a
          else
            cmake .. \
              -DLWS_WITH_CLIENT=1 \
              -DCMAKE_INSTALL_PREFIX=/usr/local
          fi
          make -j$(nproc)
          sudo make install
          sudo ldconfig
      - name: Checkout kismet
        uses: actions/checkout@v4
        with:
          repository: kismetwireless/kismet
      - name: Compile kismet
        run: |
          export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
          if [[ "${{ matrix.platform.target }}" == "x86_64-unknown-linux-gnu" ]]; then
            ./configure
          else
            ./configure --build x86_64-pc-linux-gnu --host ${{ matrix.platform.target }}
          fi
          make version
          make -j$(nproc)
      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: 'zip'
          filename: 'release.zip'
          exclusions: '*.git* /*node_modules/* .editorconfig'
      - name: Upload Release
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "release.zip"
          token: ${{ secrets.GITHUB_TOKEN }}

